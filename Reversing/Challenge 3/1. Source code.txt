#include "out.h"

int _init(EVP_PKEY_CTX *ctx) {
    int iVar1;
    iVar1 = __gmon_start__();
    return iVar1;
}

void FUN_00401020(void) {
    // WARNING: Treating indirect jump as call
    (*(code *)(undefined *)0x0)();
    return;
}

int puts(char *__s) {
    int iVar1;
    iVar1 = puts(__s);
    return iVar1;
}

int printf(char *__format,...) {
    int iVar1;
    iVar1 = printf(__format);
    return iVar1;
}

void *memset(void *__s,int __c,size_t __n) {
    void *pvVar1;
    pvVar1 = memset(__s,__c,__n);
    return pvVar1;
}

void FUN_004010a0(char *param_1) {
    atoi(param_1);
    return;
}

void processEntry _start(undefined8 param_1,undefined8 param_2) {
    undefined auStack_8 [8];
    __libc_start_main(main,param_2,&stack0x00000008,__libc_csu_init,__libc_csu_fini,param_1,auStack_8);
    do {
        // WARNING: Do nothing block with infinite loop
    } while( true );
}

void _dl_relocate_static_pie(void) {
    return;
}

void deregister_tm_clones(void) {
    return;
}

void register_tm_clones(void) {
    return;
}

void __do_global_dtors_aux(void) {
    if (completed_8059 == '\0') {
        deregister_tm_clones();
        completed_8059 = 1;
        return;
    }
    return;
}

void frame_dummy(void) {
    register_tm_clones();
    return;
}

undefined8 main(int param_1,undefined8 *param_2) {
    int iVar1;
    undefined8 uVar2;
    if (param_1 == 2) {
        iVar1 = FUN_004010a0(param_2[1]);
        if (iVar1 == -0x35010ff3) {
            puts("Access granted.");
            giveFlag();
            uVar2 = 0;
        } else {
            puts("Access denied.");
            uVar2 = 1;
        }
    } else {
        printf("Usage: %s password\n",*param_2);
        uVar2 = 1;
    }
    return uVar2;
}

void giveFlag(void) {
    char local_148 [64];
    undefined4 local_108 [63];
    uint local_c;
    local_108[0] = 0x25;
    local_108[1] = 0x2b;
    // ... (rest of the array initialization)
    local_108[59] = 0xffffffbf;
    memset(local_148,0x41,0x3c);
    for (local_c = 0; local_c < 0x3c; local_c = local_c + 1) {
        local_148[(int)local_c] = (char)local_108[(int)local_c] + local_148[(int)local_c];
    }
    puts(local_148);
    return;
}

void __libc_csu_init(EVP_PKEY_CTX *param_1,undefined8 param_2,undefined8 param_3) {
    long lVar1;
    _init(param_1);
    lVar1 = 0;
    do {
        (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)param_1 & 0xffffffff,param_2,param_3);
        lVar1 = lVar1 + 1;
    } while (lVar1 != 1);
    return;
}

void __libc_csu_fini(void) {
    return;
}

void _fini(void) {
    return;
}
w